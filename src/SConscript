import packaging

env=Environment(tools=["default","textfile",git_tag_version])
conf=Configure(env)

# DEBUGGING
debug=ARGUMENTS.get("debug",0)
if int(debug):
	env.Append(CCFLAGS="-g")

# RASPBERRY PI
raspi=ARGUMENTS.get("raspi",0)
if conf.CheckCHeader("wiringPi.h"):
	wiringpi=True
	env.Append(CCFLAGS="-DHAS_WIRINGPI")
else:
	wiringpi=False

env=conf.Finish()

# PYTHON
import distutils.sysconfig
env.Append(CPPPATH=[distutils.sysconfig.get_python_inc()])
pythonlib="python"+distutils.sysconfig.get_config_var("VERSION")


# flags
env.Append(CCFLAGS="-Wall")
env.Append(CCFLAGS="-std=c++11")
env.Append(CCFLAGS="-DBOOST_ALL_DYN_LINK")


# LIBS
libs=[
"wt",
"wthttp",
"boost_system",
"boost_thread",
"boost_filesystem",
"boost_log",
"boost_log_setup",
"pthread",
"boost_signals",
"boost_python"
]
libs+=[pythonlib]


# SOURCES
sources_widgets=[
"widgets/EndpointWidget.cpp",
"widgets/OnOffButtonWidget.cpp",
"widgets/SliderWidget.cpp"
]
sources_python=Glob("python/*.cpp")

sources_daemon=[
"constants.cpp",
"Endpoint.cpp",
"ScalarEndpoint.cpp",
"HardwareEndpoint.cpp",
"FakeEndpoint.cpp",
"exceptions.cpp",
"heinzd.cpp",
"heinz.cpp",
"EndpointListWidget.cpp",
"WebApp.cpp",
"config/config_loader.cpp",
"MultiplexerEndpoint.cpp"
]
sources_daemon+=sources_widgets
sources_daemon+=sources_python


sources_raspi=[
"backends/raspi.cpp"
]
libs_raspi=[
"wiringPi"
]

if wiringpi:
    sources_daemon+=sources_raspi
    libs+=libs_raspi

# version information
env.Substfile(target="version.hpp",source="version.hpp.in")

# program
heinzd=env.Program(target="heinzd",source=sources_daemon,LIBS=libs)

# config and installation
config_main=env.Command("heinz.conf","../config/example.conf",Copy("$TARGET", "$SOURCE"))
config_http=env.Command("http.conf","../config/http.conf",Copy("$TARGET", "$SOURCE"))
config_service=env.File("../heinz.service")


# install bin
install_bin=env.Install("/usr/bin",heinzd)
install_systemd_script=Install("/lib/systemd/system",config_service)
install_config=InstallAs("/etc/heinz/heinz.conf",config_main)
install_config2=InstallAs("/etc/heinz/http.conf",config_http)

env.Alias("install",[install_bin,install_systemd_script,install_config,install_config2])

# package
env["TARGET_ARCHITECTURE"]="amd64"
packagename="heinz"
package=packaging.make_debian(packagename,[
	(heinzd,"/usr/bin/heinzd"),
	(config_main,"/etc/heinz/heinz.conf"),
	(config_http,"/etc/heinz/http.conf"),
	(config_service,"/lib/systemd/system/heinz.service"),
	("../LICENSE","/usr/share/doc/{}/copyright".format(packagename))
	],env)
env.Alias("package",package)
# default
Default(heinzd)
